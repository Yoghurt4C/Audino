import org.gradle.internal.jvm.Jvm

buildscript {
    repositories {
        mavenCentral()
		maven {
			name = "gt"
			url = "https://gregtech.overminddl1.com/"
		}
		maven {
			name = "OC repo"
			url = "http://maven.cil.li/"
		}
		maven {
			name = "jitpack"
			url = "https://jitpack.io"
		}
		flatDir {
			dirs "libs"
		}
    }
    dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'idea'
idea{
	module {
		downloadJavadoc = true
		downloadSources = true
	}
}

repositories {
	mavenCentral()
	maven {
		name = "gt"
		url = "https://gregtech.overminddl1.com/"
	}
	maven {
		name = "OC repo"
		url = "http://maven.cil.li/"
	}
	maven {
		name = "jitpack"
		url = "https://jitpack.io"
	}
	flatDir {
		dirs "libs"
	}
}

//allprojects {
//	tasks.withType(JavaCompile) {
//		options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
//	}
//}

apply plugin: 'forge'

version = "1.0.1"
group= "mods.audino" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Audino"

sourceCompatibility = 1.7
targetCompatibility = 1.7
compileJava.options.bootClasspath = Jvm.current().getJre().getHomeDir().toString() +"/lib/rt.jar"
compileJava {
	options.encoding = "UTF-8"
}

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
}

dependencies {
	compile fileTree(dir: 'libs', include: '*.jar')
	compile "mcp.mobius.waila:Waila:1.5.11-RC2-NONEI_1.7.10:dev"
	compile "codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev"
	compile "codechicken:CodeChickenCore:1.7.10-1.0.7.47:dev"
	compile "codechicken:NotEnoughItems:1.7.10-1.0.5.120:dev"
	
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
		exclude 'thumbs.db'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
		exclude 'thumbs.db'
    }
}

def filteredSourceDir = file("${buildDir}/filtered") 

sourceSets {
	ahem {
		java {
			srcDirs = [file("${buildDir}/sources/java")]
			//include 'com/kbi/qwertech/**'
			exclude 'mods/audino/Audino.java'
		}
	}
}


// copy the main sources and filter any '$version' occurences. 
task processVersion (type: Copy, dependsOn: 'sourceMainJava') { 
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    outputs.upToDateWhen { false }
    from "build/sources/java/mods/audino/Audino.java"
    into filteredSourceDir 
    expand 'version':project.version
} 

compileJava.dependsOn processVersion 

sourceSets {
    // This source set will contain all sources that we filter 
    filtered { 
        java { 
            srcDirs = [sourceSets.ahem.java, filteredSourceDir] 
        } 
    } 
} 

// tell the compileJava task to compile the filtered source 
compileJava.source = sourceSets.filtered.java 

task deobfJar(type: Jar, dependsOn: 'jar') {
    from "build/classes/main"
	from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
		exclude 'thumbs.db'
    }
    classifier "dev"
}

task sourceJar(type: Jar, dependsOn: 'sourceMainJava') {
    from "build/sources/mods/audino/api"
    classifier "api"
}

artifacts {
    archives deobfJar
	archives sourceJar
}

idea { module { inheritOutputDirs = true } }